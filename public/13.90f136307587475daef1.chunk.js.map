{"version":3,"sources":["webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/helpers/dom/findUpAttribute.ts","webpack:///./src/helpers/dom/getRichElementValue.ts","webpack:///./src/helpers/dom/isInputEmpty.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/helpers/dom/replaceContent.ts","webpack:///./src/components/inputField.ts","webpack:///./src/helpers/dom/selectElementContents.ts","webpack:///./src/components/singleTransition.ts","webpack:///./src/helpers/dom/toggleDisability.ts","webpack:///./src/helpers/dom/getRichValue.ts"],"names":["passwordManager","invokeApi","then","result","settings","this","getState","state","currentHashPromise","newHashPromise","params","password","new_settings","_","hint","email","currentPassword","invokeCrypto","Promise","resolve","newAlgo","new_algo","salt1","Uint8Array","length","randomize","set","newPassword","all","hashes","new_password_hash","options","inputCheckPassword","auth","setUser","user","code","findUpAttribute","el","attribute","closest","markdownTags","bold","match","entityName","underline","italic","monospace","strikethrough","link","mentionName","getRichElementValue","node","lines","line","selNode","selOffset","entities","offset","nodeType","nodeValue","push","substr","trim","parentNode","parentElement","type","tag","getAttribute","url","href","user_id","dataset","follow","toUserId","isSelected","isBlock","tagName","join","splice","HTMLImageElement","alt","curChild","firstChild","nextSibling","isInputEmpty","element","hasAttribute","value","LoginPage","document","body","querySelector","className","container","createElement","imageDiv","title","titleLangKey","append","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","plainText","passwordVisible","onVisibilityClick","e","toggleVisible","classList","toggle","input","onVisibilityClickAdditional","setAttribute","autocomplete","stealthy","add","tabIndex","prepend","insertBefore","cloneNode","addEventListener","htmlToSpan","html","span","innerHTML","PasswordMonkey","passwordInputField","size","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","height","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","remove","passwordInput","page","btnNext","btnNextI18n","IntlElement","key","label","name","getStateInterval","window","setInterval","_state","wrapEmojiText","setLabel","onSubmit","update","preloader","check","response","clearInterval","m","default","mount","monkey","removeAttribute","catch","err","select","isMobile","load","focus","pushToState","replaceContent","elem","lastChild","replaceWith","textContent","init","target","preventDefault","text","originalEvent","clipboardData","getData","parseEntities","filter","wrapRichText","noLinks","wrappingDraft","execCommand","InputState","required","validate","undefined","maxLength","showLengthOn","Math","min","round","placeholder","processInput","labelText","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","border","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","getRichValue","diff","isError","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","labelOptions","setHeight","scrollHeight","newHeight","currentHeight","style","replace","transitionDuration","log","abs","setValueSilently","fireFakeInput","originalValue","isValid","isChanged","silent","wrapDraftText","setDraftValue","Error","Valid","setState","SetTransition","forwards","duration","onTransitionEnd","useRafs","timeout","raf","clearTimeout","cancelAnimationFrame","animationsEnabled","requestAnimationFrame","afterTimeout","setTimeout","toggleDisability","elements","disable","forEach","field","withEntities","combineSameEntities"],"mappings":"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","file":"13.90f136307587475daef1.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: Promise<InputCheckPasswordSRP>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.invokeCrypto('computeSRP', settings.currentPassword, state, false) as any;\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.invokeCrypto('computeSRP', settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.invokeCrypto('computeSRP', password, state, false).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword as InputCheckPasswordSRP.inputCheckPasswordSRP\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          apiManager.setUser(auth.user);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName';\r\n};\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"font-weight\"], b',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"], pre',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  }\r\n};\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    const nodeValue = node.nodeValue;\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.trim()) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest && closest.getAttribute('contenteditable') === null) {\r\n            if(tag.entityName === 'messageEntityTextUrl') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                url: (parentElement as HTMLAnchorElement).href,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            } else if(tag.entityName === 'messageEntityMentionName') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                offset: offset.offset,\r\n                length: nodeValue.length,\r\n                user_id: parentElement.dataset.follow.toUserId()\r\n              });\r\n            } else {\r\n              entities.push({\r\n                _: tag.entityName as any,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = (selNode === node);\r\n  const isBlock = node.tagName === 'DIV' || node.tagName === 'P';\r\n  if(isBlock && line.length || node.tagName === 'BR') {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  } else if(node instanceof HTMLImageElement) {\r\n    const alt = node.alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          import('./pageIm').then(m => {\r\n            m.default.mount();\r\n          });\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\nimport SetTransition from \"./singleTransition\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: true,\r\n  required?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  // protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength !== undefined && options.showLengthOn === undefined) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        // this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput(setHeight = true) {\r\n    const {scrollHeight: newHeight/* , clientHeight */} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    const currentHeight = +this.input.style.height.replace('px', '');\r\n    if(currentHeight === newHeight) {\r\n      return;\r\n    }\r\n\r\n    const TRANSITION_DURATION_FACTOR = 50;\r\n    const transitionDuration = Math.round(\r\n      TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\r\n    );\r\n\r\n    // this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.transitionDuration = `${transitionDuration}ms`;\r\n\r\n    if(setHeight) {\r\n      this.input.style.height = newHeight ? newHeight + 'px' : '';\r\n    }\r\n\r\n    const className = 'is-changing-height';\r\n    SetTransition(this.input, className, true, transitionDuration, () => {\r\n      this.input.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public isValidToChange() {\r\n    return this.isValid() && this.isChanged();\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\nexport default function selectElementContents(el: HTMLElement) {\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (\r\n  element: HTMLElement, \r\n  className: string, \r\n  forwards: boolean, \r\n  duration: number, \r\n  onTransitionEnd?: () => void, \r\n  useRafs?: number\r\n) => {\r\n  const {timeout, raf} = element.dataset;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(raf !== undefined) {\r\n    window.cancelAnimationFrame(+raf);\r\n    if(!useRafs) {\r\n      delete element.dataset.raf;\r\n    }\r\n  }\r\n\r\n  // if(forwards && className && element.classList.contains(className) && !element.classList.contains('animating')) {\r\n  //   return;\r\n  // }\r\n\r\n  if(useRafs && rootScope.settings.animationsEnabled && duration) {\r\n    element.dataset.raf = '' + window.requestAnimationFrame(() => {\r\n      delete element.dataset.raf;\r\n      SetTransition(element, className, forwards, duration, onTransitionEnd, useRafs - 1);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled || !duration) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function toggleDisability(elements: HTMLElement[], disable: boolean) {\r\n  if(disable) {\r\n    elements.forEach(el => el.setAttribute('disabled', 'true'));\r\n  } else {\r\n    elements.forEach(el => el.removeAttribute('disabled'));\r\n  }\r\n\r\n  return () => toggleDisability(elements, !disable);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities) {\r\n    RichTextProcessor.combineSameEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n"],"sourceRoot":""}